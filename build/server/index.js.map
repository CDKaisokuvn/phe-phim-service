{"version":3,"sources":["../../src/server/index.js"],"names":["main","env","uri","dbClean","app","use","express","json","get","req","res","next","status","msg","id","params","Movie","find","movie","HttpError","error","err","message","listen","port","console","log"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AAEA;;AACA;;AACA;;AACA;;;;;;;;SAEsBA,I;;;;;kEAAf;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEuB,wBAAUC,aAAIC,GAAd,CAFvB;;AAAA;AAAA;AAEKC,YAAAA,OAFL,oBAEKA,OAFL;AAGGC,YAAAA,GAHH,GAGS,0BAHT;AAKHA,YAAAA,GAAG,CAACC,GAAJ,CAAQC,oBAAQC,IAAR,EAAR;AACAH,YAAAA,GAAG,CAACC,GAAJ,CAAQ,yBAAR;AACAD,YAAAA,GAAG,CAACC,GAAJ,CAAQ,wBAAO,KAAP,CAAR;AACAD,YAAAA,GAAG,CAACC,GAAJ,CAAQ,uBAAR,EARG,CAUH;;AACAD,YAAAA,GAAG,CAACI,GAAJ,CAAQ,GAAR,EAAa,UAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAC7B,qBAAOD,GAAG,CAACE,MAAJ,CAAW,GAAX,EAAgBL,IAAhB,CAAqB;AACxBM,gBAAAA,GAAG,EAAE;AADmB,eAArB,CAAP;AAGH,aAJD;AAKAT,YAAAA,GAAG,CAACI,GAAJ,CAAQ,2BAAR;AAAA,iFAAqC,iBAAOC,GAAP,EAAYC,GAAZ,EAAiBC,IAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAErBG,wBAAAA,EAFqB,GAEdL,GAAG,CAACM,MAFU,CAErBD,EAFqB;AAAA;AAAA,+BAGTE,cAAMC,IAAN,CAAWH,EAAX,CAHS;;AAAA;AAGvBI,wBAAAA,KAHuB;;AAAA,4BAIxBA,KAJwB;AAAA;AAAA;AAAA;;AAAA,8BAKnB,IAAIC,mBAAJ,wCAA8CL,EAA9C,GAAoD,GAApD,CALmB;;AAAA;AAAA;AAAA,+BAOvB,2BAAYI,KAAZ,CAPuB;;AAAA;AAAA,yDAQtBR,GAAG,CAACE,MAAJ,CAAW,GAAX,EAAgBL,IAAhB,CAAqB;AACxBM,0BAAAA,GAAG,EAAE;AADmB,yBAArB,CARsB;;AAAA;AAAA;AAAA;AAY7BF,wBAAAA,IAAI,aAAJ;;AAZ6B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAArC;;AAAA;AAAA;AAAA;AAAA;AAgBAP,YAAAA,GAAG,CAACC,GAAJ,CAAQ,UAACI,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACxB,kBAAMS,KAAK,GAAG,IAAID,mBAAJ,cAA2B,GAA3B,CAAd;AACAR,cAAAA,IAAI,CAACS,KAAD,CAAJ;AACH,aAHD,EAhCG,CAqCH;;AACAhB,YAAAA,GAAG,CAACC,GAAJ,CAAQ,UAACgB,GAAD,EAAMZ,GAAN,EAAWC,GAAX,EAAgBC,IAAhB,EAAyB;AAC7B,kBAAMC,MAAM,GAAGS,GAAG,CAACT,MAAJ,GAAaS,GAAG,CAACT,MAAjB,GAA0B,GAAzC;AACA,qBAAOF,GAAG,CAACE,MAAJ,CAAWA,MAAX,EAAmBL,IAAnB,CAAwB;AAC3BM,gBAAAA,GAAG,EAAEQ,GAAG,CAACC;AADkB,eAAxB,CAAP;AAGH,aALD;AAOAlB,YAAAA,GAAG,CAACmB,MAAJ,CAAWtB,aAAIuB,IAAf,EAAqB;AAAA,qBACjBC,OAAO,CAACC,GAAR,sCAA0CzB,aAAIuB,IAA9C,EADiB;AAAA,aAArB;;AA7CG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["import express from \"express\";\r\nimport helmet from \"helmet\";\r\nimport morgan from \"morgan\";\r\nimport cors from \"cors\";\r\n\r\nimport { env, dbConnect } from \"../configs\";\r\nimport { Movie } from \"../models\";\r\nimport { HttpError } from \"./constant\";\r\nimport { getMovieSrc } from \"../services\";\r\n\r\nexport async function main() {\r\n    // eslint-disable-next-line no-unused-vars\r\n    const { dbClean } = await dbConnect(env.uri);\r\n    const app = express();\r\n\r\n    app.use(express.json());\r\n    app.use(helmet());\r\n    app.use(morgan(\"dev\"));\r\n    app.use(cors());\r\n\r\n    // eslint-disable-next-line no-unused-vars\r\n    app.get(\"/\", (req, res, next) => {\r\n        return res.status(200).json({\r\n            msg: \"OK\",\r\n        });\r\n    });\r\n    app.get(\"/api/v1/service-movie/:id\", async (req, res, next) => {\r\n        try {\r\n            const { id } = req.params;\r\n            const movie = await Movie.find(id);\r\n            if (!movie) {\r\n                throw new HttpError(`Could not find movie with id ${id}`, 404);\r\n            }\r\n            await getMovieSrc(movie);\r\n            return res.status(200).json({\r\n                msg: \"ok\",\r\n            });\r\n        } catch (error) {\r\n            next(error);\r\n        }\r\n    });\r\n\r\n    app.use((req, res, next) => {\r\n        const error = new HttpError(`Not Found`, 404);\r\n        next(error);\r\n    });\r\n\r\n    // eslint-disable-next-line no-unused-vars\r\n    app.use((err, req, res, next) => {\r\n        const status = err.status ? err.status : 500;\r\n        return res.status(status).json({\r\n            msg: err.message,\r\n        });\r\n    });\r\n\r\n    app.listen(env.port, () =>\r\n        console.log(`Server is running on port: ${env.port}`),\r\n    );\r\n}\r\n"],"file":"index.js"}